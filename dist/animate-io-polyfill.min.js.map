{"version":3,"sources":["animate-io-polyfill.js","intersection-observer-polyfill.js","main.js"],"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","_typeof","window","IntersectionObserverEntry","get","this","intersectionRatio","document","startDoc","doc","frame","getFrameElement","ownerDocument","registry","crossOriginUpdater","crossOriginRect","IntersectionObserver","THROTTLE_TIMEOUT","POLL_INTERVAL","USE_MUTATION_OBSERVER","_setupCrossOriginUpdater","boundingClientRect","intersectionRect","convertFromParentRect","top","bottom","left","right","width","height","observer","_checkForIntersections","_resetCrossOriginUpdater","observe","_observationTargets","some","item","element","nodeType","Error","_registerInstance","entry","_monitorIntersections","unobserve","_unmonitorIntersections","_unregisterInstance","disconnect","_unmonitorAllIntersections","takeRecords","records","_queuedEntries","_initThresholds","opt_threshold","threshold","sort","t","a","isNaN","_parseRootMargin","opt_rootMargin","margins","split","map","margin","parts","exec","parseFloat","unit","win","defaultView","_monitoringDocuments","indexOf","callback","monitoringInterval","domObserver","setInterval","addEvent","MutationObserver","attributes","childList","characterData","subtree","_monitoringUnsubscribes","clearInterval","removeEvent","root","index","rootDoc","itemDoc","unsubscribe","splice","unsubscribes","rootIsInDom","_rootIsInDom","rootRect","_getRootRect","targetRect","getBoundingClientRect","rootContainsTarget","_rootContainsTarget","oldEntry","_computeTargetAndRootIntersection","newEntry","time","performance","now","rootBounds","_hasCrossedThreshold","isIntersecting","_callback","getComputedStyle","display","rect1","rect2","parent","getParentNode","atRoot","parentRect","parentComputedStyle","frameRect","frameIntersect","body","documentElement","overflow","Math","max","min","html","clientWidth","clientHeight","_expandRectByRootMargin","rect","_rootMarginValues","newRect","oldRatio","newRatio","thresholds","containsDeep","frameElement","e","ensureDOMRect","targetArea","intersectionArea","Number","toFixed","opt_options","fn","timeout","timer","options","bind","setTimeout","rootMargin","join","node","event","opt_useCapture","addEventListener","attachEvent","removeEventListener","detatchEvent","el","err","y","x","parentBoundingRect","parentIntersectionRect","child","parentNode","host","assignedSlot","observers","defaultSettings","delay","offset","enterIntersectionClassName","exitIntersectionClassName","repeat","settings","getAttrVal","elem","attr","defaultValue","val","hasAttribute","attrval","getAttribute","main","_settings","console","log","querySelectorAll","setAttribute","concat","num","parseInt","attrToNum","offsetTop","offsetRgt","offsetBtm","offsetLft","offsetVal","intersected","classes","aioType","entries","intersectionsettings","ratio","entryTimeOut","c","classList","add","clearTimeout","remove","manualObserver","defaultOptions","in","out","trim","Element","NodeList","isPrototypeOf","HTMLCollection","error","killAllObservers","resetAnimateIO","AnimateIO","init","observeOnce","end","reset","restart","destroy","removeAttribute"],"mappings":"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","file":"animate-io-polyfill.min.js","sourcesContent":["\"use strict\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n(function () {\n  'use strict'; // Exit early if we're not running in a browser.\n\n  if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) !== 'object') {\n    return;\n  } // Exit early if all IntersectionObserver and IntersectionObserverEntry\n  // features are natively supported.\n\n\n  if ('IntersectionObserver' in window && 'IntersectionObserverEntry' in window && 'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n    // Minimal polyfill for Edge 15's lack of `isIntersecting`\n    // See: https://github.com/w3c/IntersectionObserver/issues/211\n    if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n      Object.defineProperty(window.IntersectionObserverEntry.prototype, 'isIntersecting', {\n        get: function get() {\n          return this.intersectionRatio > 0;\n        }\n      });\n    }\n\n    return;\n  }\n  /**\n   * Returns the embedding frame element, if any.\n   * @param {!Document} doc\n   * @return {!Element}\n   */\n\n\n  function getFrameElement(doc) {\n    try {\n      return doc.defaultView && doc.defaultView.frameElement || null;\n    } catch (e) {\n      // Ignore the error.\n      return null;\n    }\n  }\n  /**\n   * A local reference to the root document.\n   */\n\n\n  var document = function (startDoc) {\n    var doc = startDoc;\n    var frame = getFrameElement(doc);\n\n    while (frame) {\n      doc = frame.ownerDocument;\n      frame = getFrameElement(doc);\n    }\n\n    return doc;\n  }(window.document);\n  /**\n   * An IntersectionObserver registry. This registry exists to hold a strong\n   * reference to IntersectionObserver instances currently observing a target\n   * element. Without this registry, instances without another reference may be\n   * garbage collected.\n   */\n\n\n  var registry = [];\n  /**\n   * The signal updater for cross-origin intersection. When not null, it means\n   * that the polyfill is configured to work in a cross-origin mode.\n   * @type {function(DOMRect|ClientRect, DOMRect|ClientRect)}\n   */\n\n  var crossOriginUpdater = null;\n  /**\n   * The current cross-origin intersection. Only used in the cross-origin mode.\n   * @type {DOMRect|ClientRect}\n   */\n\n  var crossOriginRect = null;\n  /**\n   * Creates the global IntersectionObserverEntry constructor.\n   * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n   * @param {Object} entry A dictionary of instance properties.\n   * @constructor\n   */\n\n  function IntersectionObserverEntry(entry) {\n    this.time = entry.time;\n    this.target = entry.target;\n    this.rootBounds = ensureDOMRect(entry.rootBounds);\n    this.boundingClientRect = ensureDOMRect(entry.boundingClientRect);\n    this.intersectionRect = ensureDOMRect(entry.intersectionRect || getEmptyRect());\n    this.isIntersecting = !!entry.intersectionRect; // Calculates the intersection ratio.\n\n    var targetRect = this.boundingClientRect;\n    var targetArea = targetRect.width * targetRect.height;\n    var intersectionRect = this.intersectionRect;\n    var intersectionArea = intersectionRect.width * intersectionRect.height; // Sets intersection ratio.\n\n    if (targetArea) {\n      // Round the intersection ratio to avoid floating point math issues:\n      // https://github.com/w3c/IntersectionObserver/issues/324\n      this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));\n    } else {\n      // If area is zero and is intersecting, sets to 1, otherwise to 0\n      this.intersectionRatio = this.isIntersecting ? 1 : 0;\n    }\n  }\n  /**\n   * Creates the global IntersectionObserver constructor.\n   * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n   * @param {Function} callback The function to be invoked after intersection\n   *     changes have queued. The function is not invoked if the queue has\n   *     been emptied by calling the `takeRecords` method.\n   * @param {Object=} opt_options Optional configuration options.\n   * @constructor\n   */\n\n\n  function IntersectionObserver(callback, opt_options) {\n    var options = opt_options || {};\n\n    if (typeof callback != 'function') {\n      throw new Error('callback must be a function');\n    }\n\n    if (options.root && options.root.nodeType != 1) {\n      throw new Error('root must be an Element');\n    } // Binds and throttles `this._checkForIntersections`.\n\n\n    this._checkForIntersections = throttle(this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT); // Private properties.\n\n    this._callback = callback;\n    this._observationTargets = [];\n    this._queuedEntries = [];\n    this._rootMarginValues = this._parseRootMargin(options.rootMargin); // Public properties.\n\n    this.thresholds = this._initThresholds(options.threshold);\n    this.root = options.root || null;\n    this.rootMargin = this._rootMarginValues.map(function (margin) {\n      return margin.value + margin.unit;\n    }).join(' ');\n    /** @private @const {!Array<!Document>} */\n\n    this._monitoringDocuments = [];\n    /** @private @const {!Array<function()>} */\n\n    this._monitoringUnsubscribes = [];\n  }\n  /**\n   * The minimum interval within which the document will be checked for\n   * intersection changes.\n   */\n\n\n  IntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n  /**\n   * The frequency in which the polyfill polls for intersection changes.\n   * this can be updated on a per instance basis and must be set prior to\n   * calling `observe` on the first target.\n   */\n\n  IntersectionObserver.prototype.POLL_INTERVAL = null;\n  /**\n   * Use a mutation observer on the root element\n   * to detect intersection changes.\n   */\n\n  IntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n  /**\n   * Sets up the polyfill in the cross-origin mode. The result is the\n   * updater function that accepts two arguments: `boundingClientRect` and\n   * `intersectionRect` - just as these fields would be available to the\n   * parent via `IntersectionObserverEntry`. This function should be called\n   * each time the iframe receives intersection information from the parent\n   * window, e.g. via messaging.\n   * @return {function(DOMRect|ClientRect, DOMRect|ClientRect)}\n   */\n\n  IntersectionObserver._setupCrossOriginUpdater = function () {\n    if (!crossOriginUpdater) {\n      /**\n       * @param {DOMRect|ClientRect} boundingClientRect\n       * @param {DOMRect|ClientRect} intersectionRect\n       */\n      crossOriginUpdater = function crossOriginUpdater(boundingClientRect, intersectionRect) {\n        if (!boundingClientRect || !intersectionRect) {\n          crossOriginRect = getEmptyRect();\n        } else {\n          crossOriginRect = convertFromParentRect(boundingClientRect, intersectionRect);\n        }\n\n        registry.forEach(function (observer) {\n          observer._checkForIntersections();\n        });\n      };\n    }\n\n    return crossOriginUpdater;\n  };\n  /**\n   * Resets the cross-origin mode.\n   */\n\n\n  IntersectionObserver._resetCrossOriginUpdater = function () {\n    crossOriginUpdater = null;\n    crossOriginRect = null;\n  };\n  /**\n   * Starts observing a target element for intersection changes based on\n   * the thresholds values.\n   * @param {Element} target The DOM element to observe.\n   */\n\n\n  IntersectionObserver.prototype.observe = function (target) {\n    var isTargetAlreadyObserved = this._observationTargets.some(function (item) {\n      return item.element == target;\n    });\n\n    if (isTargetAlreadyObserved) {\n      return;\n    }\n\n    if (!(target && target.nodeType == 1)) {\n      throw new Error('target must be an Element');\n    }\n\n    this._registerInstance();\n\n    this._observationTargets.push({\n      element: target,\n      entry: null\n    });\n\n    this._monitorIntersections(target.ownerDocument);\n\n    this._checkForIntersections();\n  };\n  /**\n   * Stops observing a target element for intersection changes.\n   * @param {Element} target The DOM element to observe.\n   */\n\n\n  IntersectionObserver.prototype.unobserve = function (target) {\n    this._observationTargets = this._observationTargets.filter(function (item) {\n      return item.element != target;\n    });\n\n    this._unmonitorIntersections(target.ownerDocument);\n\n    if (this._observationTargets.length == 0) {\n      this._unregisterInstance();\n    }\n  };\n  /**\n   * Stops observing all target elements for intersection changes.\n   */\n\n\n  IntersectionObserver.prototype.disconnect = function () {\n    this._observationTargets = [];\n\n    this._unmonitorAllIntersections();\n\n    this._unregisterInstance();\n  };\n  /**\n   * Returns any queue entries that have not yet been reported to the\n   * callback and clears the queue. This can be used in conjunction with the\n   * callback to obtain the absolute most up-to-date intersection information.\n   * @return {Array} The currently queued entries.\n   */\n\n\n  IntersectionObserver.prototype.takeRecords = function () {\n    var records = this._queuedEntries.slice();\n\n    this._queuedEntries = [];\n    return records;\n  };\n  /**\n   * Accepts the threshold value from the user configuration object and\n   * returns a sorted array of unique threshold values. If a value is not\n   * between 0 and 1 and error is thrown.\n   * @private\n   * @param {Array|number=} opt_threshold An optional threshold value or\n   *     a list of threshold values, defaulting to [0].\n   * @return {Array} A sorted list of unique and valid threshold values.\n   */\n\n\n  IntersectionObserver.prototype._initThresholds = function (opt_threshold) {\n    var threshold = opt_threshold || [0];\n    if (!Array.isArray(threshold)) threshold = [threshold];\n    return threshold.sort().filter(function (t, i, a) {\n      if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n        throw new Error('threshold must be a number between 0 and 1 inclusively');\n      }\n\n      return t !== a[i - 1];\n    });\n  };\n  /**\n   * Accepts the rootMargin value from the user configuration object\n   * and returns an array of the four margin values as an object containing\n   * the value and unit properties. If any of the values are not properly\n   * formatted or use a unit other than px or %, and error is thrown.\n   * @private\n   * @param {string=} opt_rootMargin An optional rootMargin value,\n   *     defaulting to '0px'.\n   * @return {Array<Object>} An array of margin objects with the keys\n   *     value and unit.\n   */\n\n\n  IntersectionObserver.prototype._parseRootMargin = function (opt_rootMargin) {\n    var marginString = opt_rootMargin || '0px';\n    var margins = marginString.split(/\\s+/).map(function (margin) {\n      var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n\n      if (!parts) {\n        throw new Error('rootMargin must be specified in pixels or percent');\n      }\n\n      return {\n        value: parseFloat(parts[1]),\n        unit: parts[2]\n      };\n    }); // Handles shorthand.\n\n    margins[1] = margins[1] || margins[0];\n    margins[2] = margins[2] || margins[0];\n    margins[3] = margins[3] || margins[1];\n    return margins;\n  };\n  /**\n   * Starts polling for intersection changes if the polling is not already\n   * happening, and if the page's visibility state is visible.\n   * @param {!Document} doc\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._monitorIntersections = function (doc) {\n    var win = doc.defaultView;\n\n    if (!win) {\n      // Already destroyed.\n      return;\n    }\n\n    if (this._monitoringDocuments.indexOf(doc) != -1) {\n      // Already monitoring.\n      return;\n    } // Private state for monitoring.\n\n\n    var callback = this._checkForIntersections;\n    var monitoringInterval = null;\n    var domObserver = null; // If a poll interval is set, use polling instead of listening to\n    // resize and scroll events or DOM mutations.\n\n    if (this.POLL_INTERVAL) {\n      monitoringInterval = win.setInterval(callback, this.POLL_INTERVAL);\n    } else {\n      addEvent(win, 'resize', callback, true);\n      addEvent(doc, 'scroll', callback, true);\n\n      if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in win) {\n        domObserver = new win.MutationObserver(callback);\n        domObserver.observe(doc, {\n          attributes: true,\n          childList: true,\n          characterData: true,\n          subtree: true\n        });\n      }\n    }\n\n    this._monitoringDocuments.push(doc);\n\n    this._monitoringUnsubscribes.push(function () {\n      // Get the window object again. When a friendly iframe is destroyed, it\n      // will be null.\n      var win = doc.defaultView;\n\n      if (win) {\n        if (monitoringInterval) {\n          win.clearInterval(monitoringInterval);\n        }\n\n        removeEvent(win, 'resize', callback, true);\n      }\n\n      removeEvent(doc, 'scroll', callback, true);\n\n      if (domObserver) {\n        domObserver.disconnect();\n      }\n    }); // Also monitor the parent.\n\n\n    if (doc != (this.root && this.root.ownerDocument || document)) {\n      var frame = getFrameElement(doc);\n\n      if (frame) {\n        this._monitorIntersections(frame.ownerDocument);\n      }\n    }\n  };\n  /**\n   * Stops polling for intersection changes.\n   * @param {!Document} doc\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._unmonitorIntersections = function (doc) {\n    var index = this._monitoringDocuments.indexOf(doc);\n\n    if (index == -1) {\n      return;\n    }\n\n    var rootDoc = this.root && this.root.ownerDocument || document; // Check if any dependent targets are still remaining.\n\n    var hasDependentTargets = this._observationTargets.some(function (item) {\n      var itemDoc = item.element.ownerDocument; // Target is in this context.\n\n      if (itemDoc == doc) {\n        return true;\n      } // Target is nested in this context.\n\n\n      while (itemDoc && itemDoc != rootDoc) {\n        var frame = getFrameElement(itemDoc);\n        itemDoc = frame && frame.ownerDocument;\n\n        if (itemDoc == doc) {\n          return true;\n        }\n      }\n\n      return false;\n    });\n\n    if (hasDependentTargets) {\n      return;\n    } // Unsubscribe.\n\n\n    var unsubscribe = this._monitoringUnsubscribes[index];\n\n    this._monitoringDocuments.splice(index, 1);\n\n    this._monitoringUnsubscribes.splice(index, 1);\n\n    unsubscribe(); // Also unmonitor the parent.\n\n    if (doc != rootDoc) {\n      var frame = getFrameElement(doc);\n\n      if (frame) {\n        this._unmonitorIntersections(frame.ownerDocument);\n      }\n    }\n  };\n  /**\n   * Stops polling for intersection changes.\n   * @param {!Document} doc\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._unmonitorAllIntersections = function () {\n    var unsubscribes = this._monitoringUnsubscribes.slice(0);\n\n    this._monitoringDocuments.length = 0;\n    this._monitoringUnsubscribes.length = 0;\n\n    for (var i = 0; i < unsubscribes.length; i++) {\n      unsubscribes[i]();\n    }\n  };\n  /**\n   * Scans each observation target for intersection changes and adds them\n   * to the internal entries queue. If new entries are found, it\n   * schedules the callback to be invoked.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._checkForIntersections = function () {\n    if (!this.root && crossOriginUpdater && !crossOriginRect) {\n      // Cross origin monitoring, but no initial data available yet.\n      return;\n    }\n\n    var rootIsInDom = this._rootIsInDom();\n\n    var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n    this._observationTargets.forEach(function (item) {\n      var target = item.element;\n      var targetRect = getBoundingClientRect(target);\n\n      var rootContainsTarget = this._rootContainsTarget(target);\n\n      var oldEntry = item.entry;\n\n      var intersectionRect = rootIsInDom && rootContainsTarget && this._computeTargetAndRootIntersection(target, targetRect, rootRect);\n\n      var newEntry = item.entry = new IntersectionObserverEntry({\n        time: now(),\n        target: target,\n        boundingClientRect: targetRect,\n        rootBounds: crossOriginUpdater && !this.root ? null : rootRect,\n        intersectionRect: intersectionRect\n      });\n\n      if (!oldEntry) {\n        this._queuedEntries.push(newEntry);\n      } else if (rootIsInDom && rootContainsTarget) {\n        // If the new entry intersection ratio has crossed any of the\n        // thresholds, add a new entry.\n        if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n          this._queuedEntries.push(newEntry);\n        }\n      } else {\n        // If the root is not in the DOM or target is not contained within\n        // root but the previous entry for this target had an intersection,\n        // add a new record indicating removal.\n        if (oldEntry && oldEntry.isIntersecting) {\n          this._queuedEntries.push(newEntry);\n        }\n      }\n    }, this);\n\n    if (this._queuedEntries.length) {\n      this._callback(this.takeRecords(), this);\n    }\n  };\n  /**\n   * Accepts a target and root rect computes the intersection between then\n   * following the algorithm in the spec.\n   * TODO(philipwalton): at this time clip-path is not considered.\n   * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n   * @param {Element} target The target DOM element\n   * @param {Object} targetRect The bounding rect of the target.\n   * @param {Object} rootRect The bounding rect of the root after being\n   *     expanded by the rootMargin value.\n   * @return {?Object} The final intersection rect object or undefined if no\n   *     intersection is found.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._computeTargetAndRootIntersection = function (target, targetRect, rootRect) {\n    // If the element isn't displayed, an intersection can't happen.\n    if (window.getComputedStyle(target).display == 'none') return;\n    var intersectionRect = targetRect;\n    var parent = getParentNode(target);\n    var atRoot = false;\n\n    while (!atRoot && parent) {\n      var parentRect = null;\n      var parentComputedStyle = parent.nodeType == 1 ? window.getComputedStyle(parent) : {}; // If the parent isn't displayed, an intersection can't happen.\n\n      if (parentComputedStyle.display == 'none') return null;\n\n      if (parent == this.root || parent.nodeType ==\n      /* DOCUMENT */\n      9) {\n        atRoot = true;\n\n        if (parent == this.root || parent == document) {\n          if (crossOriginUpdater && !this.root) {\n            if (!crossOriginRect || crossOriginRect.width == 0 && crossOriginRect.height == 0) {\n              // A 0-size cross-origin intersection means no-intersection.\n              parent = null;\n              parentRect = null;\n              intersectionRect = null;\n            } else {\n              parentRect = crossOriginRect;\n            }\n          } else {\n            parentRect = rootRect;\n          }\n        } else {\n          // Check if there's a frame that can be navigated to.\n          var frame = getParentNode(parent);\n          var frameRect = frame && getBoundingClientRect(frame);\n\n          var frameIntersect = frame && this._computeTargetAndRootIntersection(frame, frameRect, rootRect);\n\n          if (frameRect && frameIntersect) {\n            parent = frame;\n            parentRect = convertFromParentRect(frameRect, frameIntersect);\n          } else {\n            parent = null;\n            intersectionRect = null;\n          }\n        }\n      } else {\n        // If the element has a non-visible overflow, and it's not the <body>\n        // or <html> element, update the intersection rect.\n        // Note: <body> and <html> cannot be clipped to a rect that's not also\n        // the document rect, so no need to compute a new intersection.\n        var doc = parent.ownerDocument;\n\n        if (parent != doc.body && parent != doc.documentElement && parentComputedStyle.overflow != 'visible') {\n          parentRect = getBoundingClientRect(parent);\n        }\n      } // If either of the above conditionals set a new parentRect,\n      // calculate new intersection data.\n\n\n      if (parentRect) {\n        intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n      }\n\n      if (!intersectionRect) break;\n      parent = parent && getParentNode(parent);\n    }\n\n    return intersectionRect;\n  };\n  /**\n   * Returns the root rect after being expanded by the rootMargin value.\n   * @return {ClientRect} The expanded root rect.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._getRootRect = function () {\n    var rootRect;\n\n    if (this.root) {\n      rootRect = getBoundingClientRect(this.root);\n    } else {\n      // Use <html>/<body> instead of window since scroll bars affect size.\n      var html = document.documentElement;\n      var body = document.body;\n      rootRect = {\n        top: 0,\n        left: 0,\n        right: html.clientWidth || body.clientWidth,\n        width: html.clientWidth || body.clientWidth,\n        bottom: html.clientHeight || body.clientHeight,\n        height: html.clientHeight || body.clientHeight\n      };\n    }\n\n    return this._expandRectByRootMargin(rootRect);\n  };\n  /**\n   * Accepts a rect and expands it by the rootMargin value.\n   * @param {DOMRect|ClientRect} rect The rect object to expand.\n   * @return {ClientRect} The expanded rect.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._expandRectByRootMargin = function (rect) {\n    var margins = this._rootMarginValues.map(function (margin, i) {\n      return margin.unit == 'px' ? margin.value : margin.value * (i % 2 ? rect.width : rect.height) / 100;\n    });\n\n    var newRect = {\n      top: rect.top - margins[0],\n      right: rect.right + margins[1],\n      bottom: rect.bottom + margins[2],\n      left: rect.left - margins[3]\n    };\n    newRect.width = newRect.right - newRect.left;\n    newRect.height = newRect.bottom - newRect.top;\n    return newRect;\n  };\n  /**\n   * Accepts an old and new entry and returns true if at least one of the\n   * threshold values has been crossed.\n   * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n   *    particular target element or null if no previous entry exists.\n   * @param {IntersectionObserverEntry} newEntry The current entry for a\n   *    particular target element.\n   * @return {boolean} Returns true if a any threshold has been crossed.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._hasCrossedThreshold = function (oldEntry, newEntry) {\n    // To make comparing easier, an entry that has a ratio of 0\n    // but does not actually intersect is given a value of -1\n    var oldRatio = oldEntry && oldEntry.isIntersecting ? oldEntry.intersectionRatio || 0 : -1;\n    var newRatio = newEntry.isIntersecting ? newEntry.intersectionRatio || 0 : -1; // Ignore unchanged ratios\n\n    if (oldRatio === newRatio) return;\n\n    for (var i = 0; i < this.thresholds.length; i++) {\n      var threshold = this.thresholds[i]; // Return true if an entry matches a threshold or if the new ratio\n      // and the old ratio are on the opposite sides of a threshold.\n\n      if (threshold == oldRatio || threshold == newRatio || threshold < oldRatio !== threshold < newRatio) {\n        return true;\n      }\n    }\n  };\n  /**\n   * Returns whether or not the root element is an element and is in the DOM.\n   * @return {boolean} True if the root element is an element and is in the DOM.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._rootIsInDom = function () {\n    return !this.root || containsDeep(document, this.root);\n  };\n  /**\n   * Returns whether or not the target element is a child of root.\n   * @param {Element} target The target element to check.\n   * @return {boolean} True if the target element is a child of root.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._rootContainsTarget = function (target) {\n    return containsDeep(this.root || document, target) && (!this.root || this.root.ownerDocument == target.ownerDocument);\n  };\n  /**\n   * Adds the instance to the global IntersectionObserver registry if it isn't\n   * already present.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._registerInstance = function () {\n    if (registry.indexOf(this) < 0) {\n      registry.push(this);\n    }\n  };\n  /**\n   * Removes the instance from the global IntersectionObserver registry.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._unregisterInstance = function () {\n    var index = registry.indexOf(this);\n    if (index != -1) registry.splice(index, 1);\n  };\n  /**\n   * Returns the result of the performance.now() method or null in browsers\n   * that don't support the API.\n   * @return {number} The elapsed time since the page was requested.\n   */\n\n\n  function now() {\n    return window.performance && performance.now && performance.now();\n  }\n  /**\n   * Throttles a function and delays its execution, so it's only called at most\n   * once within a given time period.\n   * @param {Function} fn The function to throttle.\n   * @param {number} timeout The amount of time that must pass before the\n   *     function can be called again.\n   * @return {Function} The throttled function.\n   */\n\n\n  function throttle(fn, timeout) {\n    var timer = null;\n    return function () {\n      if (!timer) {\n        timer = setTimeout(function () {\n          fn();\n          timer = null;\n        }, timeout);\n      }\n    };\n  }\n  /**\n   * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n   * @param {Node} node The DOM node to add the event handler to.\n   * @param {string} event The event name.\n   * @param {Function} fn The event handler to add.\n   * @param {boolean} opt_useCapture Optionally adds the even to the capture\n   *     phase. Note: this only works in modern browsers.\n   */\n\n\n  function addEvent(node, event, fn, opt_useCapture) {\n    if (typeof node.addEventListener == 'function') {\n      node.addEventListener(event, fn, opt_useCapture || false);\n    } else if (typeof node.attachEvent == 'function') {\n      node.attachEvent('on' + event, fn);\n    }\n  }\n  /**\n   * Removes a previously added event handler from a DOM node.\n   * @param {Node} node The DOM node to remove the event handler from.\n   * @param {string} event The event name.\n   * @param {Function} fn The event handler to remove.\n   * @param {boolean} opt_useCapture If the event handler was added with this\n   *     flag set to true, it should be set to true here in order to remove it.\n   */\n\n\n  function removeEvent(node, event, fn, opt_useCapture) {\n    if (typeof node.removeEventListener == 'function') {\n      node.removeEventListener(event, fn, opt_useCapture || false);\n    } else if (typeof node.detatchEvent == 'function') {\n      node.detatchEvent('on' + event, fn);\n    }\n  }\n  /**\n   * Returns the intersection between two rect objects.\n   * @param {Object} rect1 The first rect.\n   * @param {Object} rect2 The second rect.\n   * @return {?Object|?ClientRect} The intersection rect or undefined if no\n   *     intersection is found.\n   */\n\n\n  function computeRectIntersection(rect1, rect2) {\n    var top = Math.max(rect1.top, rect2.top);\n    var bottom = Math.min(rect1.bottom, rect2.bottom);\n    var left = Math.max(rect1.left, rect2.left);\n    var right = Math.min(rect1.right, rect2.right);\n    var width = right - left;\n    var height = bottom - top;\n    return width >= 0 && height >= 0 && {\n      top: top,\n      bottom: bottom,\n      left: left,\n      right: right,\n      width: width,\n      height: height\n    } || null;\n  }\n  /**\n   * Shims the native getBoundingClientRect for compatibility with older IE.\n   * @param {Element} el The element whose bounding rect to get.\n   * @return {DOMRect|ClientRect} The (possibly shimmed) rect of the element.\n   */\n\n\n  function getBoundingClientRect(el) {\n    var rect;\n\n    try {\n      rect = el.getBoundingClientRect();\n    } catch (err) {// Ignore Windows 7 IE11 \"Unspecified error\"\n      // https://github.com/w3c/IntersectionObserver/pull/205\n    }\n\n    if (!rect) return getEmptyRect(); // Older IE\n\n    if (!(rect.width && rect.height)) {\n      rect = {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.right - rect.left,\n        height: rect.bottom - rect.top\n      };\n    }\n\n    return rect;\n  }\n  /**\n   * Returns an empty rect object. An empty rect is returned when an element\n   * is not in the DOM.\n   * @return {ClientRect} The empty rect.\n   */\n\n\n  function getEmptyRect() {\n    return {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  /**\n   * Ensure that the result has all of the necessary fields of the DOMRect.\n   * Specifically this ensures that `x` and `y` fields are set.\n   *\n   * @param {?DOMRect|?ClientRect} rect\n   * @return {?DOMRect}\n   */\n\n\n  function ensureDOMRect(rect) {\n    // A `DOMRect` object has `x` and `y` fields.\n    if (!rect || 'x' in rect) {\n      return rect;\n    } // A IE's `ClientRect` type does not have `x` and `y`. The same is the case\n    // for internally calculated Rect objects. For the purposes of\n    // `IntersectionObserver`, it's sufficient to simply mirror `left` and `top`\n    // for these fields.\n\n\n    return {\n      top: rect.top,\n      y: rect.top,\n      bottom: rect.bottom,\n      left: rect.left,\n      x: rect.left,\n      right: rect.right,\n      width: rect.width,\n      height: rect.height\n    };\n  }\n  /**\n   * Inverts the intersection and bounding rect from the parent (frame) BCR to\n   * the local BCR space.\n   * @param {DOMRect|ClientRect} parentBoundingRect The parent's bound client rect.\n   * @param {DOMRect|ClientRect} parentIntersectionRect The parent's own intersection rect.\n   * @return {ClientRect} The local root bounding rect for the parent's children.\n   */\n\n\n  function convertFromParentRect(parentBoundingRect, parentIntersectionRect) {\n    var top = parentIntersectionRect.top - parentBoundingRect.top;\n    var left = parentIntersectionRect.left - parentBoundingRect.left;\n    return {\n      top: top,\n      left: left,\n      height: parentIntersectionRect.height,\n      width: parentIntersectionRect.width,\n      bottom: top + parentIntersectionRect.height,\n      right: left + parentIntersectionRect.width\n    };\n  }\n  /**\n   * Checks to see if a parent element contains a child element (including inside\n   * shadow DOM).\n   * @param {Node} parent The parent element.\n   * @param {Node} child The child element.\n   * @return {boolean} True if the parent node contains the child node.\n   */\n\n\n  function containsDeep(parent, child) {\n    var node = child;\n\n    while (node) {\n      if (node == parent) return true;\n      node = getParentNode(node);\n    }\n\n    return false;\n  }\n  /**\n   * Gets the parent node of an element or its host element if the parent node\n   * is a shadow root.\n   * @param {Node} node The node whose parent to get.\n   * @return {Node|null} The parent node or null if no parent exists.\n   */\n\n\n  function getParentNode(node) {\n    var parent = node.parentNode;\n\n    if (node.nodeType ==\n    /* DOCUMENT */\n    9 && node != document) {\n      // If this node is a document node, look for the embedding frame.\n      return getFrameElement(node);\n    }\n\n    if (parent && parent.nodeType == 11 && parent.host) {\n      // If the parent is a shadow root, return the host element.\n      return parent.host;\n    }\n\n    if (parent && parent.assignedSlot) {\n      // If the parent is distributed in a <slot>, return the parent of a slot.\n      return parent.assignedSlot.parentNode;\n    }\n\n    return parent;\n  } // Exposes the constructors globally.\n\n\n  window.IntersectionObserver = IntersectionObserver;\n  window.IntersectionObserverEntry = IntersectionObserverEntry;\n})();\n\n(function (window) {\n  var observers = [];\n\n  var defaultSettings = _defineProperty({\n    delay: 0,\n    offset: 0,\n    enterIntersectionClassName: \"aio-enter\",\n    exitIntersectionClassName: \"aio-exit\",\n    repeat: false,\n    threshold: 0,\n    root: document,\n    rootMargin: '0px 0px 0px 0px'\n  }, \"threshold\", 0);\n\n  var settings = {};\n  var elements = null;\n\n  var getAttrVal = function getAttrVal(elem, attr, defaultValue) {\n    var val = defaultValue;\n\n    if (elem.hasAttribute(attr)) {\n      var attrval = elem.getAttribute(attr);\n\n      if (attrval != null) {\n        val = attrval;\n      }\n    }\n\n    return val;\n  };\n\n  var attrToNum = function attrToNum(elem, attr, defaultValue) {\n    var val = getAttrVal(elem, attr, defaultValue);\n    var num = parseInt(val);\n    return Number.isNaN(num) ? defaultValue : num;\n  };\n\n  var main = function main(_settings) {\n    settings = _objectSpread(_objectSpread({}, defaultSettings), _settings);\n    console.log(\"hello\");\n    elements = document.querySelectorAll('[data-aio]');\n    elements.forEach(function (elem, i) {\n      elem.setAttribute('data-aio-id', \"aio_auto_\".concat(i));\n      var repeat = elem.hasAttribute('data-aio-repeat') || settings.repeat;\n      var delay = attrToNum(elem, 'data-aio-delay', settings.delay);\n      var offsetTop = getAttrVal(elem, 'data-aio-offset-top', settings.rootMargin.split(\" \")[0]);\n      var offsetRgt = getAttrVal(elem, 'data-aio-offset-right', settings.rootMargin.split(\" \")[1]);\n      var offsetBtm = getAttrVal(elem, 'data-aio-offset-bottom', settings.rootMargin.split(\" \")[2]);\n      var offsetLft = getAttrVal(elem, 'data-aio-offset-left', settings.rootMargin.split(\" \")[3]);\n      var rootMargin = \"\".concat(offsetTop, \" \").concat(offsetRgt, \" \").concat(offsetBtm, \" \").concat(offsetLft);\n\n      if (elem.hasAttribute(\"data-aio-offset\")) {\n        var offsetVal = elem.getAttribute(\"data-aio-offset\");\n\n        if (offsetVal != null && offsetVal.length > 0) {\n          rootMargin = offsetVal;\n        }\n      }\n\n      var intersected = false;\n      var classes = [settings.enterIntersectionClassName];\n      var aioType = elem.getAttribute('data-aio');\n\n      if (aioType.length > 0) {\n        classes.push(\"aio-\".concat(aioType));\n      }\n\n      var intersectionsettings = {\n        root: settings.root,\n        rootMargin: rootMargin,\n        threshold: settings.threshold\n      };\n      var observer = new IntersectionObserver(function (entries, intersectionsettings) {\n        entries.forEach(function (entry) {\n          var ratio = entry.intersectionRatio;\n          var entryTimeOut = 0;\n\n          if (ratio > 0) {\n            intersected = true;\n            entryTimeOut = setTimeout(function () {\n              classes.forEach(function (c) {\n                entry.target.classList.add(c);\n              });\n            }, delay);\n          }\n\n          if (ratio == 0 && repeat) {\n            clearTimeout(entryTimeOut);\n            classes.forEach(function (c) {\n              entry.target.classList.remove(c);\n            });\n          }\n\n          if (ratio == 0 && !repeat && intersected) {\n            observer.unobserve(elem);\n            observer.disconnect();\n          }\n        });\n      });\n      observer.observe(elem);\n      observers.push(observer);\n    });\n  };\n\n  var manualObserver = function manualObserver(target, options, callback, repeat) {\n    var defaultOptions = _objectSpread({\n      root: document,\n      rootMargin: 0,\n      threshold: 0\n    }, options);\n\n    var observer = new IntersectionObserver(function (entries, defaultOptions) {\n      entries.forEach(function (entry) {\n        callback(entry);\n        var ratio = entry.intersectionRatio;\n\n        if (ratio != 0) {\n          if (entry.in) entry.in();\n\n          if (!repeat) {\n            observer.unobserve(entry.target);\n            observer.disconnect();\n          }\n        } else {\n          if (entry.out) entry.out();\n        }\n      });\n    });\n\n    if (typeof target == \"string\" && target.trim().length > 0) {\n      document.querySelectorAll(target).forEach(function (elem) {\n        return observer.observe(elem);\n      });\n    } else if (target instanceof Element) {\n      observer.observe(target);\n    } else if (NodeList.prototype.isPrototypeOf(target)) {\n      target.forEach(function (elem) {\n        return observer.observe(elem);\n      });\n    } else if (HTMLCollection.prototype.isPrototypeOf(target)) {\n      _toConsumableArray(target).forEach(function (elem) {\n        return observer.observe(elem);\n      });\n    } else {\n      console.error(\"Target element: \\\"\".concat(target, \"\\\" not found\"));\n    }\n  };\n\n  var manualObserverOnce = function manualObserverOnce(target, options, callback) {\n    manualObserver(target, options, callback, false);\n  };\n\n  var manualObserverMany = function manualObserverMany(target, options, callback) {\n    manualObserver(target, options, callback, true);\n  };\n\n  var killAllObservers = function killAllObservers() {\n    observers.forEach(function (o) {\n      o.disconnect();\n    });\n    observers = [];\n  };\n\n  var resetAnimateIO = function resetAnimateIO() {\n    killAllObservers();\n\n    var _elems = document.querySelectorAll('[data-aio]');\n\n    _elems.forEach(function (elem, i) {\n      elem.classList.remove(settings.enterIntersectionClassName);\n      var aioType = elem.getAttribute('data-aio');\n\n      if (aioType.length > 0) {\n        elem.classList.remove(\"aio-\".concat(aioType));\n      }\n    });\n  };\n\n  var destroyAnimateIO = function destroyAnimateIO() {\n    resetAnimateIO();\n\n    var _elems = document.querySelectorAll('[data-aio]');\n\n    _elems.forEach(function (elem, i) {\n      var attributes = elem.attributes;\n      Array.from(attributes).forEach(function (attr) {\n        if (attr.name.indexOf(\"data-aio\") > -1) {\n          elem.removeAttribute(attr.name);\n        }\n      });\n    });\n  };\n\n  var restartAnimateIO = function restartAnimateIO() {\n    resetAnimateIO();\n    main();\n  };\n\n  window.AnimateIO = {\n    init: main,\n    observe: manualObserverMany,\n    observeOnce: manualObserverOnce,\n    end: killAllObservers,\n    reset: resetAnimateIO,\n    restart: restartAnimateIO,\n    destroy: destroyAnimateIO\n  };\n})(window);\n\nconsole.log('yo');","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n(function() {\n'use strict';\n\n// Exit early if we're not running in a browser.\nif (typeof window !== 'object') {\n  return;\n}\n\n// Exit early if all IntersectionObserver and IntersectionObserverEntry\n// features are natively supported.\nif ('IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n\n  // Minimal polyfill for Edge 15's lack of `isIntersecting`\n  // See: https://github.com/w3c/IntersectionObserver/issues/211\n  if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n    Object.defineProperty(window.IntersectionObserverEntry.prototype,\n      'isIntersecting', {\n      get: function () {\n        return this.intersectionRatio > 0;\n      }\n    });\n  }\n  return;\n}\n\n/**\n * Returns the embedding frame element, if any.\n * @param {!Document} doc\n * @return {!Element}\n */\nfunction getFrameElement(doc) {\n  try {\n    return doc.defaultView && doc.defaultView.frameElement || null;\n  } catch (e) {\n    // Ignore the error.\n    return null;\n  }\n}\n\n/**\n * A local reference to the root document.\n */\nvar document = (function(startDoc) {\n  var doc = startDoc;\n  var frame = getFrameElement(doc);\n  while (frame) {\n    doc = frame.ownerDocument;\n    frame = getFrameElement(doc);\n  }\n  return doc;\n})(window.document);\n\n/**\n * An IntersectionObserver registry. This registry exists to hold a strong\n * reference to IntersectionObserver instances currently observing a target\n * element. Without this registry, instances without another reference may be\n * garbage collected.\n */\nvar registry = [];\n\n/**\n * The signal updater for cross-origin intersection. When not null, it means\n * that the polyfill is configured to work in a cross-origin mode.\n * @type {function(DOMRect|ClientRect, DOMRect|ClientRect)}\n */\nvar crossOriginUpdater = null;\n\n/**\n * The current cross-origin intersection. Only used in the cross-origin mode.\n * @type {DOMRect|ClientRect}\n */\nvar crossOriginRect = null;\n\n\n/**\n * Creates the global IntersectionObserverEntry constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n * @param {Object} entry A dictionary of instance properties.\n * @constructor\n */\nfunction IntersectionObserverEntry(entry) {\n  this.time = entry.time;\n  this.target = entry.target;\n  this.rootBounds = ensureDOMRect(entry.rootBounds);\n  this.boundingClientRect = ensureDOMRect(entry.boundingClientRect);\n  this.intersectionRect = ensureDOMRect(entry.intersectionRect || getEmptyRect());\n  this.isIntersecting = !!entry.intersectionRect;\n\n  // Calculates the intersection ratio.\n  var targetRect = this.boundingClientRect;\n  var targetArea = targetRect.width * targetRect.height;\n  var intersectionRect = this.intersectionRect;\n  var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n  // Sets intersection ratio.\n  if (targetArea) {\n    // Round the intersection ratio to avoid floating point math issues:\n    // https://github.com/w3c/IntersectionObserver/issues/324\n    this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));\n  } else {\n    // If area is zero and is intersecting, sets to 1, otherwise to 0\n    this.intersectionRatio = this.isIntersecting ? 1 : 0;\n  }\n}\n\n\n/**\n * Creates the global IntersectionObserver constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n * @param {Function} callback The function to be invoked after intersection\n *     changes have queued. The function is not invoked if the queue has\n *     been emptied by calling the `takeRecords` method.\n * @param {Object=} opt_options Optional configuration options.\n * @constructor\n */\nfunction IntersectionObserver(callback, opt_options) {\n\n  var options = opt_options || {};\n\n  if (typeof callback != 'function') {\n    throw new Error('callback must be a function');\n  }\n\n  if (options.root && options.root.nodeType != 1) {\n    throw new Error('root must be an Element');\n  }\n\n  // Binds and throttles `this._checkForIntersections`.\n  this._checkForIntersections = throttle(\n      this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\n\n  // Private properties.\n  this._callback = callback;\n  this._observationTargets = [];\n  this._queuedEntries = [];\n  this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n  // Public properties.\n  this.thresholds = this._initThresholds(options.threshold);\n  this.root = options.root || null;\n  this.rootMargin = this._rootMarginValues.map(function(margin) {\n    return margin.value + margin.unit;\n  }).join(' ');\n\n  /** @private @const {!Array<!Document>} */\n  this._monitoringDocuments = [];\n  /** @private @const {!Array<function()>} */\n  this._monitoringUnsubscribes = [];\n}\n\n\n/**\n * The minimum interval within which the document will be checked for\n * intersection changes.\n */\nIntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n\n/**\n * The frequency in which the polyfill polls for intersection changes.\n * this can be updated on a per instance basis and must be set prior to\n * calling `observe` on the first target.\n */\nIntersectionObserver.prototype.POLL_INTERVAL = null;\n\n/**\n * Use a mutation observer on the root element\n * to detect intersection changes.\n */\nIntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n\n\n/**\n * Sets up the polyfill in the cross-origin mode. The result is the\n * updater function that accepts two arguments: `boundingClientRect` and\n * `intersectionRect` - just as these fields would be available to the\n * parent via `IntersectionObserverEntry`. This function should be called\n * each time the iframe receives intersection information from the parent\n * window, e.g. via messaging.\n * @return {function(DOMRect|ClientRect, DOMRect|ClientRect)}\n */\nIntersectionObserver._setupCrossOriginUpdater = function() {\n  if (!crossOriginUpdater) {\n    /**\n     * @param {DOMRect|ClientRect} boundingClientRect\n     * @param {DOMRect|ClientRect} intersectionRect\n     */\n    crossOriginUpdater = function(boundingClientRect, intersectionRect) {\n      if (!boundingClientRect || !intersectionRect) {\n        crossOriginRect = getEmptyRect();\n      } else {\n        crossOriginRect = convertFromParentRect(boundingClientRect, intersectionRect);\n      }\n      registry.forEach(function(observer) {\n        observer._checkForIntersections();\n      });\n    };\n  }\n  return crossOriginUpdater;\n};\n\n\n/**\n * Resets the cross-origin mode.\n */\nIntersectionObserver._resetCrossOriginUpdater = function() {\n  crossOriginUpdater = null;\n  crossOriginRect = null;\n};\n\n\n/**\n * Starts observing a target element for intersection changes based on\n * the thresholds values.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.observe = function(target) {\n  var isTargetAlreadyObserved = this._observationTargets.some(function(item) {\n    return item.element == target;\n  });\n\n  if (isTargetAlreadyObserved) {\n    return;\n  }\n\n  if (!(target && target.nodeType == 1)) {\n    throw new Error('target must be an Element');\n  }\n\n  this._registerInstance();\n  this._observationTargets.push({element: target, entry: null});\n  this._monitorIntersections(target.ownerDocument);\n  this._checkForIntersections();\n};\n\n\n/**\n * Stops observing a target element for intersection changes.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.unobserve = function(target) {\n  this._observationTargets =\n      this._observationTargets.filter(function(item) {\n        return item.element != target;\n      });\n  this._unmonitorIntersections(target.ownerDocument);\n  if (this._observationTargets.length == 0) {\n    this._unregisterInstance();\n  }\n};\n\n\n/**\n * Stops observing all target elements for intersection changes.\n */\nIntersectionObserver.prototype.disconnect = function() {\n  this._observationTargets = [];\n  this._unmonitorAllIntersections();\n  this._unregisterInstance();\n};\n\n\n/**\n * Returns any queue entries that have not yet been reported to the\n * callback and clears the queue. This can be used in conjunction with the\n * callback to obtain the absolute most up-to-date intersection information.\n * @return {Array} The currently queued entries.\n */\nIntersectionObserver.prototype.takeRecords = function() {\n  var records = this._queuedEntries.slice();\n  this._queuedEntries = [];\n  return records;\n};\n\n\n/**\n * Accepts the threshold value from the user configuration object and\n * returns a sorted array of unique threshold values. If a value is not\n * between 0 and 1 and error is thrown.\n * @private\n * @param {Array|number=} opt_threshold An optional threshold value or\n *     a list of threshold values, defaulting to [0].\n * @return {Array} A sorted list of unique and valid threshold values.\n */\nIntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n  var threshold = opt_threshold || [0];\n  if (!Array.isArray(threshold)) threshold = [threshold];\n\n  return threshold.sort().filter(function(t, i, a) {\n    if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n      throw new Error('threshold must be a number between 0 and 1 inclusively');\n    }\n    return t !== a[i - 1];\n  });\n};\n\n\n/**\n * Accepts the rootMargin value from the user configuration object\n * and returns an array of the four margin values as an object containing\n * the value and unit properties. If any of the values are not properly\n * formatted or use a unit other than px or %, and error is thrown.\n * @private\n * @param {string=} opt_rootMargin An optional rootMargin value,\n *     defaulting to '0px'.\n * @return {Array<Object>} An array of margin objects with the keys\n *     value and unit.\n */\nIntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n  var marginString = opt_rootMargin || '0px';\n  var margins = marginString.split(/\\s+/).map(function(margin) {\n    var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n    if (!parts) {\n      throw new Error('rootMargin must be specified in pixels or percent');\n    }\n    return {value: parseFloat(parts[1]), unit: parts[2]};\n  });\n\n  // Handles shorthand.\n  margins[1] = margins[1] || margins[0];\n  margins[2] = margins[2] || margins[0];\n  margins[3] = margins[3] || margins[1];\n\n  return margins;\n};\n\n\n/**\n * Starts polling for intersection changes if the polling is not already\n * happening, and if the page's visibility state is visible.\n * @param {!Document} doc\n * @private\n */\nIntersectionObserver.prototype._monitorIntersections = function(doc) {\n  var win = doc.defaultView;\n  if (!win) {\n    // Already destroyed.\n    return;\n  }\n  if (this._monitoringDocuments.indexOf(doc) != -1) {\n    // Already monitoring.\n    return;\n  }\n\n  // Private state for monitoring.\n  var callback = this._checkForIntersections;\n  var monitoringInterval = null;\n  var domObserver = null;\n\n  // If a poll interval is set, use polling instead of listening to\n  // resize and scroll events or DOM mutations.\n  if (this.POLL_INTERVAL) {\n    monitoringInterval = win.setInterval(callback, this.POLL_INTERVAL);\n  } else {\n    addEvent(win, 'resize', callback, true);\n    addEvent(doc, 'scroll', callback, true);\n    if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in win) {\n      domObserver = new win.MutationObserver(callback);\n      domObserver.observe(doc, {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      });\n    }\n  }\n\n  this._monitoringDocuments.push(doc);\n  this._monitoringUnsubscribes.push(function() {\n    // Get the window object again. When a friendly iframe is destroyed, it\n    // will be null.\n    var win = doc.defaultView;\n\n    if (win) {\n      if (monitoringInterval) {\n        win.clearInterval(monitoringInterval);\n      }\n      removeEvent(win, 'resize', callback, true);\n    }\n\n    removeEvent(doc, 'scroll', callback, true);\n    if (domObserver) {\n      domObserver.disconnect();\n    }\n  });\n\n  // Also monitor the parent.\n  if (doc != (this.root && this.root.ownerDocument || document)) {\n    var frame = getFrameElement(doc);\n    if (frame) {\n      this._monitorIntersections(frame.ownerDocument);\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @param {!Document} doc\n * @private\n */\nIntersectionObserver.prototype._unmonitorIntersections = function(doc) {\n  var index = this._monitoringDocuments.indexOf(doc);\n  if (index == -1) {\n    return;\n  }\n\n  var rootDoc = (this.root && this.root.ownerDocument || document);\n\n  // Check if any dependent targets are still remaining.\n  var hasDependentTargets =\n      this._observationTargets.some(function(item) {\n        var itemDoc = item.element.ownerDocument;\n        // Target is in this context.\n        if (itemDoc == doc) {\n          return true;\n        }\n        // Target is nested in this context.\n        while (itemDoc && itemDoc != rootDoc) {\n          var frame = getFrameElement(itemDoc);\n          itemDoc = frame && frame.ownerDocument;\n          if (itemDoc == doc) {\n            return true;\n          }\n        }\n        return false;\n      });\n  if (hasDependentTargets) {\n    return;\n  }\n\n  // Unsubscribe.\n  var unsubscribe = this._monitoringUnsubscribes[index];\n  this._monitoringDocuments.splice(index, 1);\n  this._monitoringUnsubscribes.splice(index, 1);\n  unsubscribe();\n\n  // Also unmonitor the parent.\n  if (doc != rootDoc) {\n    var frame = getFrameElement(doc);\n    if (frame) {\n      this._unmonitorIntersections(frame.ownerDocument);\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @param {!Document} doc\n * @private\n */\nIntersectionObserver.prototype._unmonitorAllIntersections = function() {\n  var unsubscribes = this._monitoringUnsubscribes.slice(0);\n  this._monitoringDocuments.length = 0;\n  this._monitoringUnsubscribes.length = 0;\n  for (var i = 0; i < unsubscribes.length; i++) {\n    unsubscribes[i]();\n  }\n};\n\n\n/**\n * Scans each observation target for intersection changes and adds them\n * to the internal entries queue. If new entries are found, it\n * schedules the callback to be invoked.\n * @private\n */\nIntersectionObserver.prototype._checkForIntersections = function() {\n  if (!this.root && crossOriginUpdater && !crossOriginRect) {\n    // Cross origin monitoring, but no initial data available yet.\n    return;\n  }\n\n  var rootIsInDom = this._rootIsInDom();\n  var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n  this._observationTargets.forEach(function(item) {\n    var target = item.element;\n    var targetRect = getBoundingClientRect(target);\n    var rootContainsTarget = this._rootContainsTarget(target);\n    var oldEntry = item.entry;\n    var intersectionRect = rootIsInDom && rootContainsTarget &&\n        this._computeTargetAndRootIntersection(target, targetRect, rootRect);\n\n    var newEntry = item.entry = new IntersectionObserverEntry({\n      time: now(),\n      target: target,\n      boundingClientRect: targetRect,\n      rootBounds: crossOriginUpdater && !this.root ? null : rootRect,\n      intersectionRect: intersectionRect\n    });\n\n    if (!oldEntry) {\n      this._queuedEntries.push(newEntry);\n    } else if (rootIsInDom && rootContainsTarget) {\n      // If the new entry intersection ratio has crossed any of the\n      // thresholds, add a new entry.\n      if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n        this._queuedEntries.push(newEntry);\n      }\n    } else {\n      // If the root is not in the DOM or target is not contained within\n      // root but the previous entry for this target had an intersection,\n      // add a new record indicating removal.\n      if (oldEntry && oldEntry.isIntersecting) {\n        this._queuedEntries.push(newEntry);\n      }\n    }\n  }, this);\n\n  if (this._queuedEntries.length) {\n    this._callback(this.takeRecords(), this);\n  }\n};\n\n\n/**\n * Accepts a target and root rect computes the intersection between then\n * following the algorithm in the spec.\n * TODO(philipwalton): at this time clip-path is not considered.\n * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n * @param {Element} target The target DOM element\n * @param {Object} targetRect The bounding rect of the target.\n * @param {Object} rootRect The bounding rect of the root after being\n *     expanded by the rootMargin value.\n * @return {?Object} The final intersection rect object or undefined if no\n *     intersection is found.\n * @private\n */\nIntersectionObserver.prototype._computeTargetAndRootIntersection =\n    function(target, targetRect, rootRect) {\n  // If the element isn't displayed, an intersection can't happen.\n  if (window.getComputedStyle(target).display == 'none') return;\n\n  var intersectionRect = targetRect;\n  var parent = getParentNode(target);\n  var atRoot = false;\n\n  while (!atRoot && parent) {\n    var parentRect = null;\n    var parentComputedStyle = parent.nodeType == 1 ?\n        window.getComputedStyle(parent) : {};\n\n    // If the parent isn't displayed, an intersection can't happen.\n    if (parentComputedStyle.display == 'none') return null;\n\n    if (parent == this.root || parent.nodeType == /* DOCUMENT */ 9) {\n      atRoot = true;\n      if (parent == this.root || parent == document) {\n        if (crossOriginUpdater && !this.root) {\n          if (!crossOriginRect ||\n              crossOriginRect.width == 0 && crossOriginRect.height == 0) {\n            // A 0-size cross-origin intersection means no-intersection.\n            parent = null;\n            parentRect = null;\n            intersectionRect = null;\n          } else {\n            parentRect = crossOriginRect;\n          }\n        } else {\n          parentRect = rootRect;\n        }\n      } else {\n        // Check if there's a frame that can be navigated to.\n        var frame = getParentNode(parent);\n        var frameRect = frame && getBoundingClientRect(frame);\n        var frameIntersect =\n            frame &&\n            this._computeTargetAndRootIntersection(frame, frameRect, rootRect);\n        if (frameRect && frameIntersect) {\n          parent = frame;\n          parentRect = convertFromParentRect(frameRect, frameIntersect);\n        } else {\n          parent = null;\n          intersectionRect = null;\n        }\n      }\n    } else {\n      // If the element has a non-visible overflow, and it's not the <body>\n      // or <html> element, update the intersection rect.\n      // Note: <body> and <html> cannot be clipped to a rect that's not also\n      // the document rect, so no need to compute a new intersection.\n      var doc = parent.ownerDocument;\n      if (parent != doc.body &&\n          parent != doc.documentElement &&\n          parentComputedStyle.overflow != 'visible') {\n        parentRect = getBoundingClientRect(parent);\n      }\n    }\n\n    // If either of the above conditionals set a new parentRect,\n    // calculate new intersection data.\n    if (parentRect) {\n      intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n    }\n    if (!intersectionRect) break;\n    parent = parent && getParentNode(parent);\n  }\n  return intersectionRect;\n};\n\n\n/**\n * Returns the root rect after being expanded by the rootMargin value.\n * @return {ClientRect} The expanded root rect.\n * @private\n */\nIntersectionObserver.prototype._getRootRect = function() {\n  var rootRect;\n  if (this.root) {\n    rootRect = getBoundingClientRect(this.root);\n  } else {\n    // Use <html>/<body> instead of window since scroll bars affect size.\n    var html = document.documentElement;\n    var body = document.body;\n    rootRect = {\n      top: 0,\n      left: 0,\n      right: html.clientWidth || body.clientWidth,\n      width: html.clientWidth || body.clientWidth,\n      bottom: html.clientHeight || body.clientHeight,\n      height: html.clientHeight || body.clientHeight\n    };\n  }\n  return this._expandRectByRootMargin(rootRect);\n};\n\n\n/**\n * Accepts a rect and expands it by the rootMargin value.\n * @param {DOMRect|ClientRect} rect The rect object to expand.\n * @return {ClientRect} The expanded rect.\n * @private\n */\nIntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n  var margins = this._rootMarginValues.map(function(margin, i) {\n    return margin.unit == 'px' ? margin.value :\n        margin.value * (i % 2 ? rect.width : rect.height) / 100;\n  });\n  var newRect = {\n    top: rect.top - margins[0],\n    right: rect.right + margins[1],\n    bottom: rect.bottom + margins[2],\n    left: rect.left - margins[3]\n  };\n  newRect.width = newRect.right - newRect.left;\n  newRect.height = newRect.bottom - newRect.top;\n\n  return newRect;\n};\n\n\n/**\n * Accepts an old and new entry and returns true if at least one of the\n * threshold values has been crossed.\n * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n *    particular target element or null if no previous entry exists.\n * @param {IntersectionObserverEntry} newEntry The current entry for a\n *    particular target element.\n * @return {boolean} Returns true if a any threshold has been crossed.\n * @private\n */\nIntersectionObserver.prototype._hasCrossedThreshold =\n    function(oldEntry, newEntry) {\n\n  // To make comparing easier, an entry that has a ratio of 0\n  // but does not actually intersect is given a value of -1\n  var oldRatio = oldEntry && oldEntry.isIntersecting ?\n      oldEntry.intersectionRatio || 0 : -1;\n  var newRatio = newEntry.isIntersecting ?\n      newEntry.intersectionRatio || 0 : -1;\n\n  // Ignore unchanged ratios\n  if (oldRatio === newRatio) return;\n\n  for (var i = 0; i < this.thresholds.length; i++) {\n    var threshold = this.thresholds[i];\n\n    // Return true if an entry matches a threshold or if the new ratio\n    // and the old ratio are on the opposite sides of a threshold.\n    if (threshold == oldRatio || threshold == newRatio ||\n        threshold < oldRatio !== threshold < newRatio) {\n      return true;\n    }\n  }\n};\n\n\n/**\n * Returns whether or not the root element is an element and is in the DOM.\n * @return {boolean} True if the root element is an element and is in the DOM.\n * @private\n */\nIntersectionObserver.prototype._rootIsInDom = function() {\n  return !this.root || containsDeep(document, this.root);\n};\n\n\n/**\n * Returns whether or not the target element is a child of root.\n * @param {Element} target The target element to check.\n * @return {boolean} True if the target element is a child of root.\n * @private\n */\nIntersectionObserver.prototype._rootContainsTarget = function(target) {\n  return containsDeep(this.root || document, target) &&\n    (!this.root || this.root.ownerDocument == target.ownerDocument);\n};\n\n\n/**\n * Adds the instance to the global IntersectionObserver registry if it isn't\n * already present.\n * @private\n */\nIntersectionObserver.prototype._registerInstance = function() {\n  if (registry.indexOf(this) < 0) {\n    registry.push(this);\n  }\n};\n\n\n/**\n * Removes the instance from the global IntersectionObserver registry.\n * @private\n */\nIntersectionObserver.prototype._unregisterInstance = function() {\n  var index = registry.indexOf(this);\n  if (index != -1) registry.splice(index, 1);\n};\n\n\n/**\n * Returns the result of the performance.now() method or null in browsers\n * that don't support the API.\n * @return {number} The elapsed time since the page was requested.\n */\nfunction now() {\n  return window.performance && performance.now && performance.now();\n}\n\n\n/**\n * Throttles a function and delays its execution, so it's only called at most\n * once within a given time period.\n * @param {Function} fn The function to throttle.\n * @param {number} timeout The amount of time that must pass before the\n *     function can be called again.\n * @return {Function} The throttled function.\n */\nfunction throttle(fn, timeout) {\n  var timer = null;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function() {\n        fn();\n        timer = null;\n      }, timeout);\n    }\n  };\n}\n\n\n/**\n * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n * @param {Node} node The DOM node to add the event handler to.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to add.\n * @param {boolean} opt_useCapture Optionally adds the even to the capture\n *     phase. Note: this only works in modern browsers.\n */\nfunction addEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.addEventListener == 'function') {\n    node.addEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.attachEvent == 'function') {\n    node.attachEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Removes a previously added event handler from a DOM node.\n * @param {Node} node The DOM node to remove the event handler from.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to remove.\n * @param {boolean} opt_useCapture If the event handler was added with this\n *     flag set to true, it should be set to true here in order to remove it.\n */\nfunction removeEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.removeEventListener == 'function') {\n    node.removeEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.detatchEvent == 'function') {\n    node.detatchEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Returns the intersection between two rect objects.\n * @param {Object} rect1 The first rect.\n * @param {Object} rect2 The second rect.\n * @return {?Object|?ClientRect} The intersection rect or undefined if no\n *     intersection is found.\n */\nfunction computeRectIntersection(rect1, rect2) {\n  var top = Math.max(rect1.top, rect2.top);\n  var bottom = Math.min(rect1.bottom, rect2.bottom);\n  var left = Math.max(rect1.left, rect2.left);\n  var right = Math.min(rect1.right, rect2.right);\n  var width = right - left;\n  var height = bottom - top;\n\n  return (width >= 0 && height >= 0) && {\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    width: width,\n    height: height\n  } || null;\n}\n\n\n/**\n * Shims the native getBoundingClientRect for compatibility with older IE.\n * @param {Element} el The element whose bounding rect to get.\n * @return {DOMRect|ClientRect} The (possibly shimmed) rect of the element.\n */\nfunction getBoundingClientRect(el) {\n  var rect;\n\n  try {\n    rect = el.getBoundingClientRect();\n  } catch (err) {\n    // Ignore Windows 7 IE11 \"Unspecified error\"\n    // https://github.com/w3c/IntersectionObserver/pull/205\n  }\n\n  if (!rect) return getEmptyRect();\n\n  // Older IE\n  if (!(rect.width && rect.height)) {\n    rect = {\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      left: rect.left,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n  }\n  return rect;\n}\n\n\n/**\n * Returns an empty rect object. An empty rect is returned when an element\n * is not in the DOM.\n * @return {ClientRect} The empty rect.\n */\nfunction getEmptyRect() {\n  return {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: 0,\n    height: 0\n  };\n}\n\n\n/**\n * Ensure that the result has all of the necessary fields of the DOMRect.\n * Specifically this ensures that `x` and `y` fields are set.\n *\n * @param {?DOMRect|?ClientRect} rect\n * @return {?DOMRect}\n */\nfunction ensureDOMRect(rect) {\n  // A `DOMRect` object has `x` and `y` fields.\n  if (!rect || 'x' in rect) {\n    return rect;\n  }\n  // A IE's `ClientRect` type does not have `x` and `y`. The same is the case\n  // for internally calculated Rect objects. For the purposes of\n  // `IntersectionObserver`, it's sufficient to simply mirror `left` and `top`\n  // for these fields.\n  return {\n    top: rect.top,\n    y: rect.top,\n    bottom: rect.bottom,\n    left: rect.left,\n    x: rect.left,\n    right: rect.right,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\n\n/**\n * Inverts the intersection and bounding rect from the parent (frame) BCR to\n * the local BCR space.\n * @param {DOMRect|ClientRect} parentBoundingRect The parent's bound client rect.\n * @param {DOMRect|ClientRect} parentIntersectionRect The parent's own intersection rect.\n * @return {ClientRect} The local root bounding rect for the parent's children.\n */\nfunction convertFromParentRect(parentBoundingRect, parentIntersectionRect) {\n  var top = parentIntersectionRect.top - parentBoundingRect.top;\n  var left = parentIntersectionRect.left - parentBoundingRect.left;\n  return {\n    top: top,\n    left: left,\n    height: parentIntersectionRect.height,\n    width: parentIntersectionRect.width,\n    bottom: top + parentIntersectionRect.height,\n    right: left + parentIntersectionRect.width\n  };\n}\n\n\n/**\n * Checks to see if a parent element contains a child element (including inside\n * shadow DOM).\n * @param {Node} parent The parent element.\n * @param {Node} child The child element.\n * @return {boolean} True if the parent node contains the child node.\n */\nfunction containsDeep(parent, child) {\n  var node = child;\n  while (node) {\n    if (node == parent) return true;\n\n    node = getParentNode(node);\n  }\n  return false;\n}\n\n\n/**\n * Gets the parent node of an element or its host element if the parent node\n * is a shadow root.\n * @param {Node} node The node whose parent to get.\n * @return {Node|null} The parent node or null if no parent exists.\n */\nfunction getParentNode(node) {\n  var parent = node.parentNode;\n\n  if (node.nodeType == /* DOCUMENT */ 9 && node != document) {\n    // If this node is a document node, look for the embedding frame.\n    return getFrameElement(node);\n  }\n\n  if (parent && parent.nodeType == 11 && parent.host) {\n    // If the parent is a shadow root, return the host element.\n    return parent.host;\n  }\n\n  if (parent && parent.assignedSlot) {\n    // If the parent is distributed in a <slot>, return the parent of a slot.\n    return parent.assignedSlot.parentNode;\n  }\n\n  return parent;\n}\n\n\n// Exposes the constructors globally.\nwindow.IntersectionObserver = IntersectionObserver;\nwindow.IntersectionObserverEntry = IntersectionObserverEntry;\n\n}());\n","((window) => {\r\n\r\n    let observers = [];\r\n\r\n    let defaultSettings = {\r\n        delay: 0,\r\n        offset: 0,\r\n        enterIntersectionClassName: \"aio-enter\",\r\n        exitIntersectionClassName: \"aio-exit\",\r\n        repeat: false,\r\n        threshold: 0,\r\n        root: document,\r\n        rootMargin: '0px 0px 0px 0px',\r\n        threshold: 0\r\n    }\r\n    let settings = {};\r\n\r\n    let elements = null;\r\n\r\n    let getAttrVal = (elem, attr, defaultValue) => {\r\n        let val = defaultValue;\r\n        if (elem.hasAttribute(attr)) {\r\n            let attrval = elem.getAttribute(attr);\r\n            if (attrval != null) {\r\n                val = attrval;\r\n            }\r\n        }\r\n        return val;\r\n    }\r\n\r\n    let attrToNum = (elem, attr, defaultValue) => {\r\n        let val = getAttrVal(elem, attr, defaultValue);\r\n        let num = parseInt(val);\r\n        return Number.isNaN(num) ? defaultValue : num;\r\n    }\r\n\r\n    let main = (_settings) => {\r\n        settings = { ...defaultSettings, ..._settings }\r\n        console.log(\"hello\");\r\n\r\n        elements = document.querySelectorAll('[data-aio]');\r\n\r\n        elements.forEach((elem, i) => {\r\n            elem.setAttribute('data-aio-id', `aio_auto_${i}`);\r\n\r\n            let repeat = elem.hasAttribute('data-aio-repeat') || settings.repeat;\r\n            let delay = attrToNum(elem, 'data-aio-delay', settings.delay);\r\n            let offsetTop = getAttrVal(elem, 'data-aio-offset-top', settings.rootMargin.split(\" \")[0]);\r\n            let offsetRgt = getAttrVal(elem, 'data-aio-offset-right', settings.rootMargin.split(\" \")[1]);\r\n            let offsetBtm = getAttrVal(elem, 'data-aio-offset-bottom', settings.rootMargin.split(\" \")[2]);\r\n            let offsetLft = getAttrVal(elem, 'data-aio-offset-left', settings.rootMargin.split(\" \")[3]);\r\n            let rootMargin = `${offsetTop} ${offsetRgt} ${offsetBtm} ${offsetLft}`;\r\n            if (elem.hasAttribute(\"data-aio-offset\")) {\r\n                let offsetVal = elem.getAttribute(\"data-aio-offset\");\r\n                if (offsetVal != null && offsetVal.length > 0) {\r\n                    rootMargin = offsetVal;\r\n                }\r\n            }\r\n            let intersected = false;\r\n\r\n            let classes = [settings.enterIntersectionClassName];\r\n            let aioType = elem.getAttribute('data-aio');\r\n            if (aioType.length > 0) {\r\n                classes.push(`aio-${aioType}`);\r\n            }\r\n\r\n            let intersectionsettings = {\r\n                root: settings.root,\r\n                rootMargin: rootMargin,\r\n                threshold: settings.threshold\r\n            }\r\n\r\n            let observer = new IntersectionObserver((entries, intersectionsettings) => {\r\n                entries.forEach(entry => {\r\n                    let ratio = entry.intersectionRatio;\r\n                    let entryTimeOut = 0;\r\n\r\n                    if (ratio > 0) {\r\n                        intersected = true;\r\n                        entryTimeOut = setTimeout(() => {\r\n                            classes.forEach(c => {\r\n                                entry.target.classList.add(c);\r\n                            });\r\n                        }, delay);\r\n                    }\r\n\r\n                    if (ratio == 0 && repeat) {\r\n                        clearTimeout(entryTimeOut);\r\n                        classes.forEach(c => {\r\n                            entry.target.classList.remove(c);\r\n                        });\r\n                    }\r\n\r\n                    if (ratio == 0 && !repeat && intersected) {\r\n                        observer.unobserve(elem);\r\n                        observer.disconnect();\r\n                    }\r\n                })\r\n            });\r\n\r\n            observer.observe(elem);\r\n            observers.push(observer);\r\n        });\r\n\r\n\r\n    }\r\n\r\n    let manualObserver = (target, options, callback, repeat) => {\r\n        let defaultOptions = {\r\n            root: document,\r\n            rootMargin: 0,\r\n            threshold: 0,\r\n            ...options\r\n        }\r\n        let observer = new IntersectionObserver((entries, defaultOptions) => {\r\n            entries.forEach(entry => {\r\n                callback(entry);\r\n\r\n                let ratio = entry.intersectionRatio;\r\n                if (ratio != 0) {\r\n                    if (entry.in) entry.in();\r\n                    if (!repeat) {\r\n                        observer.unobserve(entry.target);\r\n                        observer.disconnect();\r\n                    }\r\n                } else {\r\n                    if (entry.out) entry.out();\r\n                }\r\n            })\r\n        });\r\n\r\n        if (typeof target == \"string\" && target.trim().length > 0) {\r\n            document.querySelectorAll(target).forEach(elem => observer.observe(elem));\r\n        } else if (target instanceof Element) {\r\n            observer.observe(target);\r\n        } else if (NodeList.prototype.isPrototypeOf(target)) {\r\n            target.forEach(elem => observer.observe(elem));\r\n        } else if (HTMLCollection.prototype.isPrototypeOf(target)) {\r\n            [...target].forEach(elem => observer.observe(elem));\r\n        } else {\r\n            console.error(`Target element: \"${target}\" not found`);\r\n        }\r\n    }\r\n\r\n\r\n    let manualObserverOnce = (target, options, callback) => {\r\n        manualObserver(target, options, callback, false);\r\n    }\r\n\r\n    let manualObserverMany = (target, options, callback) => {\r\n        manualObserver(target, options, callback, true);\r\n    }\r\n\r\n\r\n    let killAllObservers = () => {\r\n        observers.forEach(o => {\r\n            o.disconnect();\r\n        })\r\n\r\n        observers = [];\r\n    }\r\n\r\n    let resetAnimateIO = () => {\r\n        killAllObservers();\r\n        let _elems = document.querySelectorAll('[data-aio]');\r\n        _elems.forEach((elem, i) => {\r\n            elem.classList.remove(settings.enterIntersectionClassName);\r\n\r\n            let aioType = elem.getAttribute('data-aio');\r\n            if (aioType.length > 0) {\r\n                elem.classList.remove(`aio-${aioType}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    let destroyAnimateIO = () => {\r\n        resetAnimateIO();\r\n        let _elems = document.querySelectorAll('[data-aio]');\r\n        _elems.forEach((elem, i) => {\r\n            let { attributes } = elem;\r\n            Array.from(attributes).forEach(attr => {\r\n                if (attr.name.indexOf(\"data-aio\") > -1) {\r\n                    elem.removeAttribute(attr.name);\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n    let restartAnimateIO = () => {\r\n        resetAnimateIO();\r\n        main();\r\n    }\r\n\r\n    window.AnimateIO = {\r\n        init: main,\r\n        observe: manualObserverMany,\r\n        observeOnce: manualObserverOnce,\r\n        end: killAllObservers,\r\n        reset: resetAnimateIO,\r\n        restart: restartAnimateIO,\r\n        destroy: destroyAnimateIO\r\n    };\r\n})(window)\r\n\r\nconsole.log('yo')"]}